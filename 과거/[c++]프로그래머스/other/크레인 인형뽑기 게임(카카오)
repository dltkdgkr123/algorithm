/* 
    board[j][move]가 0이 아닐 때 까지 탐색 후 아니면 해당 인덱스를 0으로 바꾸고(뽑고) 
    
    이전의 top과 비교하여 
    같으면 pop 후 answer +=2;
    아니면 push
    
    처음의 top은 상관없는 -1로 두어 empty일 때 top 참조 못하는 오류 방지
*/

#include <string>
#include <vector>
#include <stack>

using namespace std;

int solution(vector<vector<int>> board, vector<int> moves) {
    int answer = 0;
    stack<int> s;
    s.push(-1);

    for (int i = 0; i < moves.size(); i++)
    {


        int move = moves[i] - 1;

        for (int j = 0; j < board.size(); j++)
        {

            int now = board[j][move];
            if (now == 0)
                continue;

            else
            {
                board[j][move] = 0;
                
                if (now == s.top())
                {
                    s.pop();
                    answer += 2;
                }
                else
                {
                    s.push(now);
                }
            }
            break;
        }

    }

    return answer;
}
