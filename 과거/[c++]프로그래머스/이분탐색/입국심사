

/* 시간초과 (복잡도가 아닌 return값이 어느 범위에도 없는경우 ( ex)mid = 2여야할 때 1,3밖에 범위에 없는 경우 ) 무한루프
   대략의 mid 값을 구한 후, 추후 mid를 1씩 줄여가며 값이 바뀌기 전까지 구하여 최소값을 찾는 코드
   -> 메모리 절약을 위해 모든 경우의 수로 초기화 후 이분탐색 하지 않고, 올바른 mid인지 확인할 때 마다 연산을 하는 방식
*/

/*  

#include <string>
#include <vector>
#include <algorithm>

using namespace std;

long long binary_search(int n, vector<int> times)
{
	long long start = 0;
	long long end = times.front() * n; // 시간이 가장 적게 걸리는 심사원에게만 받을 때 (이분탐색이므로 times.back())으로 놔도 테케의 종류에 따라 오히려 더 걸리기도 함)
	long long mid = end / 2;

	while (1)
	{
		long long value = 0;
		for (int i = 0; i < times.size(); i++)
			value += mid / times[i]; // 해당 시간에 각각의 심사위원이 심사가능한 사람수의 합

		if (value == n)
			return mid; // 대략의(최소값인지 아직 모르는) mid 리턴

		else if (value < n) // value가 커져야 함
		{

			start = mid;
			mid = (start + end) / 2;
		}

		else if (value > n) // value가 작아져야 함
		{
			end = mid;
			mid = (start + end) / 2;

		}

	}
}

long long solution(int n, vector<int> times) {
	sort(times.begin(), times.end());
	
	long long mid = binary_search(n, times);
	
	while (1) // 심사 가능한 인원수가 같지 않을때 까지 mid를 --한 후, 달라지면 ++값 리턴
	{
		int value = 0;
		
		for (int i = 0; i < times.size(); i++)
		{
			value += mid / times[i];
		}

		if (value == n)
			mid--;

		else return ++mid;
		
	}

}

*/
