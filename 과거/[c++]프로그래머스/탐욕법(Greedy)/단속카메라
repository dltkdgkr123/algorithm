#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int solution(vector<vector<int>> routes) {
    int answer = 1; // 마지막은 비교 불가하므로 1로 시작

    sort(routes.begin(), routes.end()); 

    int min = routes[0][1];

    for (int i = 0; i < routes.size()-1; i++)
    {
        if (routes[i + 1][0] <= min) // 다음 차량의 진입지점이  현재 차량의 진출지점보다 작거나 같으면
        {
            if (routes[i + 1][1] < min) // 다음 차량의 진입지점이 더 작다면 갱신
                min = routes[i + 1][1];
            continue;
        }
        else
        {
            answer++; // 다음 차량의 진입지점이  현재 차량의 진출지점보다 크면 answer++후 min 갱신
            min = routes[i + 1][1];
        }


    }
    return answer;
    

}

/*

다른사람 풀이 : 역주행 차량이 없다는 가정하에 정렬 후 현재 차량의 진출지점 이하는 모두 같은 카메라에 적용  

#include <bits/stdc++.h>

using namespace std;

bool cmp(vector<int> a, vector<int> b) { return a[1] < b[1]; }

int solution(vector<vector<int>> routes) {
    int answer = 0;
    int limit = -30001;
    sort(routes.begin(), routes.end(), cmp);
    for(int i = 0; i < routes.size(); i++){
        if(limit < routes[i][0]){
            answer++; // 이 때 answer+1 됨
            limit = routes[i][1];
        }
    }
    return answer;
}


/*
