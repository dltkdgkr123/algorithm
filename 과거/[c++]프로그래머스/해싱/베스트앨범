/*

map을 pair<.., ..>를 인자로 받는 사용자 정의함수로 sort하려하니 오류발생
->map을 sort하려면 vector로 변환해야한다. 
시간복잡도 향상을 위해 사용하는 map인데, 여기서 벡터 생성/대입 및 정렬을 해야하니 map을 굳이 사용해야하나 의문이 들었다.

효율적인 방법을 고민하다가 방법이 떠오르지 않아 복잡도가 높아질 수 있는 earse(), 이중for문 등을 사용하였고
풀고난 후 훨씬 좋은 알고리즘이 있을 것 같아 다른 풀이를 찾아보니 비슷한 방법이 대부분이였다.
원래 시간복잡도는 어느정도 포기해야하는 문제인 듯 하였다.

*/

#include <string>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

bool compare(pair<string, int> a, pair<string, int> b)
{
        return a.second > b.second;
}


vector<int> solution(vector<string> genres, vector<int> plays) {
    vector<int> answer;
    map<string, int> m_g;
    vector<pair<string, int>> v_g;
    vector<pair<int, int>> v_s;

    for (int i = 0; i < genres.size(); i++)
        m_g[genres[i]] += plays[i];
 
    for (auto iter = m_g.begin(); iter != m_g.end(); iter++)
        v_g.push_back(make_pair(iter->first, iter->second));

    sort(v_g.begin(), v_g.end(), compare);

    for (int i = 0; i < v_g.size(); i++)
    {
        int cnt = 0;

        for (int j = 0; j < genres.size(); j++)
        {
            if (v_g[i].first == genres[j])
                v_s.push_back(make_pair(plays[j], j));
        }

        while (cnt <2 && !v_s.empty())
        {

            int max = 0;
            int idx = 0;
            int j = 0;

            for (int i = 0; i < v_s.size(); i++)
            {

                if (v_s[i].first > max)
                {
                    max = v_s[i].first;
                    idx = v_s[i].second;
                    j = i;
                }
            }
            v_s.erase(v_s.begin() + j);
            answer.push_back(idx);
            cnt++;
        }

        v_s.clear();
    }
    
    return answer;
}
