/* 실행시간 기준 오름차순 정렬 후, 삽입시간 기준 오름차순 정렬한다.
삽입시간이 낮은 것을 우선순위로 하는 큐에 삽입시간보다 런타임이 더 지났을때 push하여 처리한다.

런타임과 사용시간을 따로 생각해야하며, 런타임동안 아무것도 삽입되지않았을 경우를 고려해야한다.

sort()는 구현은 내부적으로 지정된 갯수보다 작은 범위를 정렬할 때는 인서션 소트나 버블소트 등 단순한 알고리듬을 사용하고, 
그보다 큰 경우 퀵소트, 머지소트등을 (보통은 퀵소트) 사용한다.
다만, cout을 통해 그 과정을 살펴보니 일반의 정렬과정과 다소 상이하였고, 라이브러리 제작자의 최적화를 거쳐 구현하여 일반적인 소트과정과 차이가 있는듯 했다. 

sort()와 우선순위큐 차이 ---------------------------------------------------------------------------------------------------------------------
1.정렬기준 default값 less 동일

2.하지만 sort()에서는 less시 오름차순, priorityqueue에서는 차순이다.
또한 프레디케이트 p(a,b)가 sort()는 true일 때 a가 우선순위, priorityqueue는 false일 때 b가 우선순위가 된다.
 -> priorityqueue는 false로 평가되면 a의 우선순위가 더 높은것으로 간주하는 컨테이너이며, sort()는 true일 때 a의 우선순위가 높기 때문이다.
 -> 따라서 less/greater 및 return값이 서로 반대이다.
 
3. sort()에서는 bool형태의 함수를 정렬기준으로 사용하지만, priorityqueue에서는 클래스 및 구조체를 정렬기준으로 기입해야한다.
-> 템플릿 특수화에는 타입이 매개변수로 들어가야 하는데, 함수이름은 포인터 타입을 가지는 상수이지 타입이 아니기 때문이다.

+ %2의 0,1를 flase/true 리턴하는 함수를 구현하여 홀수짝수 구분 등도 가능
----------------------------------------------------------------------------------------------------------------------------------------------

정렬을 두번하고 우선순위큐에 집어넣으므로 비효율적이며 vector를 erase할 시, 사이즈가 커지면 뒤의 원소들을 앞으로 옮김에 따라 실행시간이 길어지므로
사용을 지양해야한다. -> 다른 알고리즘 필요

- 답을 보니, 대기시간 기준 정렬 후, {실행시간, 대기시간} 순서로 push하면 정렬횟수를 줄일 수 있고, 기준원소(실행시간)이 앞의 원소로 가게되므로
priorityqueue 정렬을 따로 구현할 필요가 없다.

- 또한, 인덱스 변수를 생성하여 push마다 인덱스++;를 하고 거기에서부터 다음 push를 진행하면 earse를 할 필요가 없다.

- 답에서는 큐에 아무것도 없을시, 런타임++;를 하는 방법을 사용하였는데, 본 코드에선 따로 알고리즘을 구현하였는데 이건 더 나은방법인듯 하다.


구현 중 for(int i=0;jobs.size();i++){jobs.erase(..)}; for(int i=0;q.size();i++){q.pop()}; 과 같은 코드를 썼었는데,
원소가 삭제됨에 따라 사이즈로 줄어듦으로, 원소의 누락이 발생되므로 사용하지 않아야 한다.
*/


#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

bool compare(vector<int> a, vector<int> b)
{
    if (a[0] = b[0])
        return a[1] < b[1];

}

struct compare2
{
    vector<int> a;
    vector<int> b;

    bool operator()(vector<int>a, vector<int> b)
    {
        return a[1] > b[1];
    }
};

int solution(vector<vector<int>> jobs) {
    priority_queue<vector<int>, vector<vector<int>>, compare2> q;
    int answer = 0;
    int runtime = 0;
    int time = 0;
    int jobs_size = 0;
    
    jobs_size = jobs.size();
    
    sort(jobs.begin(), jobs.end(), compare);
    sort(jobs.begin(), jobs.end());
    
    while (!jobs.empty() || !q.empty())
    {
        
        while(!jobs.empty())
        {
            if (runtime >= jobs[0][0])
            {
                q.push(jobs[0]);
                jobs.erase(jobs.begin());
                
            }
            else break;
        }
        
        if(q.empty())
        {
            q.push(jobs[0]);
            jobs.erase(jobs.begin());
            time += q.top()[1];
            runtime = q.top()[0] + q.top()[1];
            q.pop();
        }
        else
        {
            time += ((runtime - q.top()[0]) + q.top()[1]);
            runtime += q.top()[1];
            q.pop();
        }
    }

    answer = time / jobs_size;

    return answer;
}
